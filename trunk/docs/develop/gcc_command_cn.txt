GCC 命令行参数:

-c
编译或汇编源文件,但是不作连接.编译器输出对应于源文件的目标文件.

-S
编译后即停止,不进行汇编.对于每个输入的非汇编语言文件,输出文件是汇编语言文件.

-E
预处理后即停止,不进行编译.预处理后的代码送往标准输出

-o file
指定输出文件为file.该选项不在乎GCC产生什么输出,无论是可执行文件,目标文件,汇编文件还是预处理
后的C代码.

-pipe
在编译过程的不同阶段间使用管道而非临时文件进行通信.这个选项在某些系统上无法工作,因为那些系统
的汇编器不能从管道读取数据. GNU的汇编器没有这个问题. 

-ansi
支持符合ANSI标准的C程序
这样就会关闭GNU C中某些不兼容ANSI C的特性,例如asm, inline和 typeof关键字

-pedantic
打开完全服从ANSI C标准所需的全部警告诊断;拒绝接受采用了被禁止的语法扩展的程序

-fno-asm
不把asm，inline或者typedef当做标志符，用 __asm__, __inline__和__typeof__能够替代他们.
`-ansi' 隐含声明了`-fno-asm'
`-ansi'选项能够阻止alloca和_exit成为内建函数

-fno-builtin
不接受不是两个下划线开头的内建函数(built-in function).目前受影响的函数有_exit, abort, 
abs, alloca, cos, exit, fabs, labs, memcmp, memcpy, sin, sqrt, strcmp, 
strcpy,和strlen

-fno-strict-prototype
对于没有参数的函数声明,例如`int foo ();',按C风格处理---即不说明参数个数或类型. 
(仅针对C++).正常情况下,这样的函数foo在C++中意味着参数为空

-nostdinc
不要在标准系统目录中寻找头文件.只搜索`-I'选项指定的目录(以及当前目录,如果合适)
结合使用`-nostdinc'和`-I-'选项,你可以把包含文件搜索限制在显式指定的目录

-nostdinc++
不要在C++专用标准目录中寻找头文件,但是仍然搜索其他标准目录. (当建立`libg++'时使用这个选项.)

-nostartfiles
不连接系统标准启动文件,而标准库文件仍然正常使用. 

-nostdlib
不连接系统标准启动文件和标准库文件.只把指定的文件传递给连接器.

-static
在支持动态连接(dynamic linking)的系统上,阻止连接共享库.该选项在其他系统上无效

-shared
生成一个共享目标文件,他可以和其他目标文件连接产生可执行文件.只有部分系统支持该选项

-Wl,option
把选项option传递给连接器.如果option中含有逗号,就在逗号处分割成多个选项

-MD -MF
产生一个关于目标的依赖文件.

警告信息:

-Wshadow
一旦某个局部变量屏蔽了另一个局部变量,编译器就发出警告

-Wmissing-prototypes
如果没有预先声明函数原形就定义了全局函数,编译器就发出警告.即使函数定义自身提供了函数原形
也会产生这个警告. 他的目的是检查没有在头文件中声明的全局函数.

-Wunused
如果某个局部变量除了声明就没再使用,或者声明了静态函数但是没有定义,或者某条语句的运算结果显然
没有使用, 编译器就发出警告.

-Wformat
检查对printf和scanf等函数的调用,确认各个参数类型和格式串中的一致

-Wpointer-arith
任何语句如果依赖于函数类型的大小(size)或者void类型的大小,编译器就发出警告. GNU C为了便于
计算void *指针和函数指针,就把这些类型的大小定义为1.



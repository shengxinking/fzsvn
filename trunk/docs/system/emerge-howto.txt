emerge使用手册.

1. 介绍
   emerge是gentoo的包管理工具, 它完成下面的功能:
   1. 同步portage.
   2. 安装软件和它的依赖软件(源代码和二进制包).
   3. 升级整个系统.
   4. 从源代码创建二进制包.

2. 安装升级软件包.
   1. emerge "ebuild软件包名称"
      源代码安装软件, 用户可以指定版本号 "emerge [ = | >= | <= ] 软件名称-major-minor"
   
   2. emerge system | world
      升级整个系统, system是指能使系统正常运行的软件的集合, world包括system所有的软件, 和
      其他安装在系统里的所有软件.

   
3. emerge指令

   --clean (-c)
   检查系统安装的软件包并且清除系统的过时软件.

   --config
   执行安装完的软件的配置指令. 很多软件没有特殊的配置指令.

   --depclean
   清除系统中没有明确安装, 并且不被其他软件依赖的软件. 它将系统安装的软件创建一个依赖关系树, 
   然后检查系统的每个软件, 如果不在依赖关系树里, 就是删除的候选.

   --info
   显示系统的portage的信息. 包括编译信息, USE标记信息等等.

   --metadata
   更新软件的元信息的缓存, 将元信息从${PORTDIR}/metadata/cache 到 /var/cache/edb/dep

   --prune(-P)
   卸载除最高版本外的软件的其他版本. 如果一个软件安装了好几个版本, 如1.1, 1.2, 运行此命令
   会删除1.1版本.

   --regen
   检查更新Portage树的依赖关系, 它会加速搜索软件包的速度. --sync命令会自动--regen.

   --search(-s)
   搜索匹配给定字符串的软件包. 你可以使用正则表达式, 只要在前面加上'%'. 如
   emerge --search "%gcc$"
   搜索以gcc结尾的软件.

   --searchdesc(-S)
   在软件包的名称和软件包的描述中查找字符串. 它同样支持正则表达式. 

   --sync
   从网络的rsync站点更新本地的Portage树, 并且更新Portage树的依赖关系.

   --unmerge(-C)
   卸载匹配的软件, 它不检查软件的依赖关系.

   --update(-u)
   更新软件包到最新的可用版本, 不一定的最高版本, 有可能最高版本被MASK.

  
4. emerge选项

   --alphabetical
   将软件包的USE关键字按字母顺序排序, 默认的排序是启用的USE关键字在前面, 未启用的USE关键字
   在后面.

   --ask (-a)
   在执行操作之前, 提示用户是否执行或者取消.

   --buildpkgonly(-B)
   只将源代码编译, 做成二进制软件包, 不安装在系统里.

   --changelog(-l)
   显示要安装软件的ChangeLog.

   --color <y | n>
   在输出中显示颜色.

   --columns
   软件名称, 新版本, 老版本会按不同的列显示.

   --config-root=DIR
   设置PORTAGE_CONFIGROOT环境变量.

   --debug
   设置emerge命令为debug模式.

   --deep(-D)
   使emerge命令执行的时候考虑Portage树的依赖关系, 并且解决依赖关系.

   --emptytree(-e)
   重新安装所有的软件和它们的依赖软件, 一般执行emermge --emptytree system | world

   --fetchonly(-f)
   不编译或者安装软件, 只下载软件.

   --fetch-all-uri(-F)
   不编译或者安装软件, 下载软件和USE标记相关的软件.

   --newuse(-N)
   重新编译USE标志改变的包.

   --nodeps(-O)
   编译软件而不理会它依赖的软件包.

   --noreplace
   忽略已经安装好的软件.

   --oneshot(-l)
   正常的安装包, 但是不将包记录到World文件为以后更新.

   --onlydeps
   只安装指定软件的依赖包, 不按装指定的软件
   
   --pretend(-p)
   不执行实际的操作, 只打印需要执行的操作, 每个软件的标志如下:
   N 新的软件, 未安装在系统里
   S 新的安装版本(SLOT)
   U 升级软件, 系统里安装的是旧版本
   D 降级软件, 系统里安装的是新版本
   R 重新安装软件, 和系统里安装的是相同版本
   F 已经下载软件到本地的Cache里了.
   B 被已经安装的软件阻止安装.

   --quiet(-q)
   安静模式

   --reinstall changed-use
   重新安装EBUILD的USE标志改变的软件, 和--newuse不同的是, newuse只安装用户设定的软件
   USE标志改变的软件, 而它只重新安装Ebuild的标志改变的软件.
   
   --skipfirst
   仅仅用于--resume命名, 它将第一个包从Resume列表里删除, 一般是编译出错的包, 接着编译后
   面的所有的包, 用户必须保证删除的包不会影响后面的包的依赖关系.

   --tree(-t)
   显示软件的依赖关系, 只能用于--update, --deep, --emptytree指令.

   --usepkg(-k)
   如果软件的二进制包存在, 使用二进制包, 否则下载源代码编译.

   --usepkgonly(-K)
   只安装软件的二进制包.

   --verbose(-v)
   显示更多的信息.

   --with-bdeps <y | n>
   生成依赖关系的时候, 将软件的编译时间考虑进去. 安装软件的时候默认是n, --depclean的时候
   默认是y.

   
gentoolkit命令

   1. revdep-rebuild
   检查系统里的软件的依赖关系, 如果有软件缺失了依赖的软件, 安装依赖的软件. 一般执行完emerge --depclean后, 或者执行了emerge --clean后执行.

   2. eclean distfiles (eclean-dist)
   检查portage下载的源代码包, 将过时的源代码包删除, 节省磁盘空间.

   3. eclean packages (eclean-pkg)
   检查portage下载的二进制代码包, 将过时的二进制代码包删除, 节省磁盘空间.


3. 相关的文件

   1. /etc/make.conf
   定义全局的USE变量: USE="....."
   定义C编译参数: CFLAGS="-O2 -pipe"
   定义C++编译参数: CXXFLAGS="$CFLAGS"
   定义并行编译参数: MAKEOPTS="-jN", 其中N为CPU的个数+1

   2. /etc/portage/package.use
   定义每个软件的USE变量和其他变量:
   media-libs/imlib2		gif jpeg
   app-editors/vim		-X
   www-client/firefox		linguas_zh_CN

   3. /etc/portage/package.mask
   定义要屏蔽的软件，如不需要升级，不需要安装
   >=www-client/gcc-4.5

   4. /etc/portage/package.keywords
   定义可以使用不同的keywords的软件
   app-i18n/fcitx		~amd64


4. 安装eix提高搜索性能

   emerge -av eix

   eix 软件名称


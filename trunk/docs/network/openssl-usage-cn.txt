Openssl 命令说明

1. RSA

i. genrsa 生成RSA私有密钥文件

   a) 生成RSA私有密钥文件, 不加密生成的文件, RSA私有密钥的长度是N位, 不要小于64, 通常1024位是合理的.
   openssl genrsa -out FILENAME(RSA私有密钥文件名称) numbits(RSA私有密钥的位数, 默认512位)
	
   b) 生成RSA私有密钥文件, 并且对生成的私有密钥文件加密, 密码长度为4-8191.
   openssl genrsa -out FILENAME -des|-des3|-idea numbits(RSA密钥的位数, 默认512位)

   c) 生成RSA私有密钥文件, 用3作为指数, 默认的是65537作为指数.
   openssl genrsa -out FILENAME -3|F4 numbits

   d) 生成RSA私有密钥文件, 指定产生随机数的种子文件, 任何文件都可以, 包括文本文件, 字符设备, 
   openssl genrsa -out FILENAME -rand 随机数文件 numbits

   genrsa只能生成PEM格式的密钥文件, 如果要用DER格式或者NET格式, 用rsa命令转换.

ii. rsa 操作RSA密钥文件

   a) 显示RSA密钥文件的内容
   openssl rsa -in rsa私有密钥 -text -noout 
   openssl rsa -pubin -in rsa公有密钥 -text -noout

   b) 显示RSA密钥的modulus
   openssl rsa -in rsa私有密钥 -modulus -noout 
   openssl rsa -pubin -in rsa公有密钥 -modulus -noout

   c) 检查RSA私有密钥文件(不能检查公有密钥文件)
   openssl rsa -in rsa私有密钥 -check -noout
   
   d) 用私有密钥生成公有密钥(不能从公有密钥生成私有密钥)
   openssl rsa -in rsa私有密钥 -pubout -out rsa公有密钥文件

   e) 将加密的RSA密钥文件转换成不加密的RSA密钥文件(只有私有密钥才能加密, 公有密钥不能加密).
   openssl rsa -in 加密的rsa私有密钥 -passin pass:密码 -out 不加密的rsa私有密钥

   f) 将不加密的RSA密钥文件转换成加密的RSA密钥文件(只有私有密钥才能加密, 公有密钥不能加密)
   openssl rsa -in rsa私有密钥文件 -out 加密的RSA私有密钥文件 -des3|idea|des -passout pass:加密密码

2. DSA

i. gendsa 生成DSA私有密钥文件

   a) 生成加密的DSA私有密钥文件 
   openssl dsaparam -out dsa参数文件 私有密钥位数
   openssl gendsa -des|des3|idea -passout pass:密码 dsa参数文件 -out 加密的DSA私有密钥文件.

   b) 生成不加密的DSA私有密钥
   openssl dsaparam -out dsa参数文件
   openssl gendsa dsa参数文件 -out 加密的DSA私有密钥文件.

   c) 输出dsa参数文件的内容
   openssl dsaparam -in dsa参数文件 -text -noout

   d) 

iii. 密钥文件的密码
   

3. X509证书

i. req 证书请求

   a) 根据RSA的私有密钥生成证书请求
   openssl req -new -key rsa私有密钥文件 -out 证书请求文件

   b) 同时生成RSA私有密钥和证书请求
   openssl req -new -newkey rsa:1024 -keyout rsa私有密钥文件 -out 证书请求文件

   c) 生成自签名的根证书(CA)， 同时生成RSA私有密钥
   openssl req -x509 -newkey rsa:1024 -keyout rsa私有密钥 -out 自签名证书

   d) 生成自签名证书(一般作为根证书CA)
   openssl req -new -x509 -days NNN -key rsa私有密钥 -out 根证书文件

   e) 输出证书请求的私有密钥的公有密钥
   openssl req -in 证书请求 -pubkey -out

   f) 打印证书请求的内容
   openssl req -in 证书请求文件 -text -noout

   g) 验证证书请求文件的签名
   openssl req -in 证书请求文件 -verify -noout


ii ca 证书生成
   
   a)  证书配置文件:

[ca]
default_ca = CA_default		#  默认的CA设置， 见下节

[CA_default]
dir		= ./fzCA		# CA证书的根目录
database  	= $dir/index		# index文件，每次生成新的证书，会
		  			#在index文件里增加一行记录, 必须有这个文件
new_certs_dir	= $dir/newcerts		# 新生成的证书的存储目录, 新的证书的
		  			#名字在存储目录里面是<序列号.pem>

certificate	= $dir/rootca.pem	# 根证书文件名
private_key	= $dir/rootkey.pem	# 根证书的密钥文件名
serial		= $dir/serial		# 序列号文件, 初始值为01, 每次生成新的CA证书后，必须有这个文件.
		  			# 序列号会+1
RANDFILE	= $dir/rand		# 随机数文件, 可选，

default_days	= 3650			# 证书的期限(天)
default_crl_days = 30			# CRL期限(天)
default_md	= md5			# 散列算法

policy		= fz_policy		# 使用的policy, 见下节
email_in_dn	= no			# 不将email地址加入新证书的DN节
name_opt	= ca_default		# 证书节点名字显示选项
cert_opt	= ca_default		# 证书显示选项
copy_extensions	= none			# 不拷贝证书请求的扩展选项

[ fz_policy ]	  			# policy选项
countryName 		= supplied	# 国家代码， 必须使用
stateOrProvinceName	= optional	# 州/省名称， 可选
organizationName	= optional	# 公司/组织名称， 可选
organizationalUnitName	= optional	# 部门名称， 可选
commonName		= supplied	# 通用名称， 必选
emailAddress		= optional	# Email地址， 可选

[x509_extensions]			# 如果有这节，就会生成x509 V3的证书(0x2)， 如果没有，
					# 只会生成x509 V1的证书(0x0)
basicConstraints        = CA:TRUE       # add CA:TRUE for CA certificate.
#basicConstraints       = CA:FALSE      # add CA:FALSE for end certificate.


   b) 生成单个x509 V1(0x0)证书.
   openssl ca -config openssl证书配置文件 -in 证书请求文件 -out 证书文件

   c) 生成单个x509 V3(0x2)证书.
   openssl ca -config openssl证书配置文件 -extensions x509_extensions -in 证书请求文件 -out 证书文件

   d) 生成很多X509 V1(0x0)证书
   openssl ca -config openssl证书配置文件 -infiles 证书请求文件1 证书请求文件2 

   e) 生成很多X509 V3(0x2)证书
   openssl ca -config openssl证书配置文件 -extensions x509_extensions -infiles 证书请求文件1 证书请求文件2

   f) 生成X509 CRL文件
   openssl ca -config openssl证书配置文件 -gencrl -out CRL文件

   g) selfsign 用生成证书请求的私有密钥签名生成的X509 V1证书.
   openssl ca -config openssl证书配置文件 -selfsign -keyfile 生成REQ的私有密钥 -in 证书请求文件 -out 证书文件

   h) selfsign 用生成证书请求的私有密钥签名生成的X509 V3证书.
   openssl ca -config openssl证书配置文件 -extensions x509_extensions -selfsign -keyfile 生成REQ的私有密钥 -in 证书请求文件 -out 证书文件

   i) 撤销证书， 在数据库里标记证书已经撤销了(第一列: R 撤销, V 有效).
   openssl ca -config openssl证书配置文件 -revoke 要撤销的证书文件

   j) 生成证书撤销列表(CRL).
   openssl ca -config openssl证书配置文件 -gencrl -out 证书撤销列表文件


iii) x509 证书处理

   a) 打印证书文件的内容.
   openssl x509 -in 证书文件 -text -noout

   b) 将证书文件转化成信任证书文件.
   openssl x509 -in 证书文件 -trustout -out 信任证书文件

   c) 将证书文件转换成信任证书文件，并添加信任对象(clientAuth, serverAuth, emailProtection)
   openssl x509 -in 证书文件 -trustout -addtrust clientAuth|serverAuth|emailProtection -out 信任证书文件.

   d) 将证书文件转换成信任证书文件，并添加禁止对象(clientAuth, serverAuth, emailProtection)
   openssl x509 -in 证书文件 -trustout -addreject clientAuth|serverAuth|emailProtection -out 信任证书文件

   e) 清除信任证书里的信任对象, 结果存为信任证书.
   openssl x509 -in 信任证书文件 -trustout -clrtrust -out 信任证书文件

   f) 清除信任证书里的禁止对象, 结果存为信任证书.
   openssl x509 -in 信任证书文件 -trustout -clrreject -out 信任证书文件

   g) 打印出(信任)证书文件的使用范围
   openssl x509 -in (信任)证书文件 -noout

   h) 将通用的证书文件转化为自签名证书(CA)
   openssl x509 -in 证书文件 -signkey 证书请求的私有密钥 -out 自签名证书文件

   i) 将证书请求转化成自签名证书(CA)
   openssl x509 -req -in 证书请求文件 -signkey 证书请求的私有密钥 -days 有效日期 -out 自签名证书文件

   j) 将证书文件转换成证书请求文件
   openssl x509 -in 证书文件 -x509toreq -signkey 证书请求文件的私有密钥 -out 证书请求文件

   k) 将证书请求转换成证书文件(mini CA)
   openssl x509 -req -in 证书请求文件 -CA 根证书文件 -CAkey 根证书密钥文件 -CAcreateserial -out 证书文件
   openssl x509 -req -in 证书请求文件 -CA 根证书文件 -CAkey 根证书密钥文件 -CAserial 序列号文件 -out 证书文件
   openssl x509 -req -in 证书请求文件 -CA 根证书文件 extfile openssl配置文件 -extensions X509扩展的节 -CAkey 根证书密钥文件 -CAcreateserial -out 证书文件

   l) 将证书文件转化成信任证书文件, 并加上别名
   openssl x509 -in 证书文件 -trustout -setalias "别名" -out 信任证书文件
   

iiii) x509证书撤销列表

   a) 把给定的证书文件生成撤消证书.

   
 
v) dgst 文件加密签名

   a) 输出明文文件的MD2值到文件(或者打印到终端)
   openssl dgst -md2 -out MD2文件 明文文件1 ...
   openssl dgst -md2 明文文件1 ...

   b) 输出明文文件的MD4值到文件(或者打印到终端)
   openssl dgst -md4 -out MD4文件 明文文件1 ...
   openssl dgst -md4 明文文件1 ...

   c) 输出明文文件的MD5值到文件(或者打印到终端)
   openssl dgst -md5 -out MD5文件 明文文件1 ...
   openssl dgst -md5 明文文件1 ...

   d) 输出明文文件的SHA1值到文件(或者打印到终端)
   openssl dgst -sha1 -out SHA1文件 明文文件1 ...
   openssl dgst -sha1 明文文件1 ...

   e) 输出明文文件的SHA值到文件(或者打印到终端)
   openssl dgst -sha -out SHA文件 明文文件1 ...
   openssl dgst -sha 明文文件1 ...
  
   f) 输出明文文件的ripemd160值到文件(或者打印到终端)
   openssl dgst -ripemd160 -out 散列文件 明文文件1 ...
   openssl dgst -ripemd160 明文文件1 ...

   g) 输出明文文件的dss1值到文件(或者打印到终端)
   openssl dgst -dss1 -out 散列文件 明文文件1 ...
   openssl dgst -dss1 明文文件1 ...

   h) 输出明文文件的sha224值到文件(或者打印到终端)
   openssl dgst -sha224 -out 散列文件 明文文件1 ...
   openssl dgst -sha224 明文文件1 ...

   i) 输出明文文件的sha256值到文件(或者打印到终端)
   openssl dgst -sha256 -out 散列文件 明文文件1 ...
   openssl dgst -sha256 明文文件1 ...

   j) 输出明文文件的sha512值到文件(或者打印到终端)
   openssl dgst -sha384 -out 散列文件 明文文件1 ...
   openssl dgst -sha384 明文文件1 ...

   k) 输出明文文件的sha512值到文件(或者打印到终端)
   openssl dgst -sha512 -out 散列文件 明文文件1 ...
   openssl dgst -sha512 明文文件1 ...

   l) 输出DGST的值为二进制格式
   openssl dgst -md5 -binary -out 散列文件 明文文件

   m) 输出DGST的值为HEX, 两位一组用':'分隔开.
   openssl dgst -md5 -c -hex -out 散列文件 明文文件
   openssl dgst -md5 -c  明文文件

   n) 用私有密钥对明文文件进行数字签名(可以不选散列算法, 不推荐).
   openssl dgst -sign RSA私有密钥文件 -散列算法 -out 签名输出文件 明文文件
   openssl dgst -sign DSA私有密钥文件 -dss1 -out 签名输出文件 明文文件

   o) 用公有密钥对签名文件和明文文件进行校验
   openssl dgst -verify RSA公有密钥 -签名时选择的散列算法 -signature 签名文件 明文文件
   openssl dgst -verify DSA公有密钥 -签名时选择的散列算法 -signature 签名文件 明文文件

   p) 用私有密钥对签名文件和明文文件进行校验
   openssl dgst -prverify RSA私有密钥 -签名时选择的散列算法 -signature 签名文件 明文文件
   openssl dgst -prverify DSA私有密钥 -签名时选择的散列算法 -signature 签名文件 明文文件
   

vi) enc 对称加密文件

   a) 输入password的几种方式:
   openssl enc -bf -in 明文文件 -pass pass:密码 -a -out 密文文件
   openssl enc -bf -in 明文文件 -pass file:密码文件 -a -out 密文文件
   openssl enc -bf -in 明文文件 -k 密码 -a -out 密文文件
   openssl enc -bf -in 明文文件 -kfile 密码文件 -a -out 密文文件
   openssl enc -bf -in 明文文件 -K 密钥 -iv IV值 -a -out 密文文件

   b) 


vii) PKCS#12 证书

   a) 将证书和私有密钥合并成PKCS#12文件:
   openssl pkcs12 -in  x509证书文件 -inkey 证书文件的私有密钥 -export -out pkcs12文件.

   b) 将PKCS12 证书文件还原成X509证书文件和私有密钥文件(不加密).
   openssl pkcs12 -in pkcs12证书文件 -nodes -out x509证书文件和私有密钥的合并文件.

   c) 将PKCS12 证书文件还原成X509证书文件和私有密钥文件(加密).
   openssl pkcs12 -in pkcs12证书文件 -out x509证书文件和私有密钥的合并文件.

   d) 从PKCS12 证书文件中导出X509证书.
   openssl pkcs12 -in pkcs12证书文件 -nokeys -out x509证书文件(前5行是摘要信息)

   e) 从PKCS12 证书文件中导出私有密钥文件(不加密).
   openssl pkcs12 -in pkcs12证书文件 -nocerts -nodes -out 私有密钥文件(前5行是摘要信息)

   f) 从PKCS12 证书文件中导出私有密钥文件(加密).
   openssl pkcs12 -in pkcs12证书文件 -nocerts -out 私有密钥文件(前5行是摘要信息)


